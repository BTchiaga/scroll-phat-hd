#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    May 06, 2017 06:08:20 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import CA_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    CA_support.set_Tk_var()
    top = Simple_CA_for_scrollPhatHD (root)
    CA_support.init(root, top)
    root.mainloop()

w = None
def create_Simple_CA_for_scrollPhatHD(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    CA_support.set_Tk_var()
    top = Simple_CA_for_scrollPhatHD (w)
    CA_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Simple_CA_for_scrollPhatHD():
    global w
    w.destroy()
    w = None


class Simple_CA_for_scrollPhatHD:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("350x140+582+220")
        top.title("Simple CA for scrollPhatHD")



        self.Label1 = Label(top)
        self.Label1.place(relx=0.06, rely=0.14, height=18, width=56)
        self.Label1.configure(text='''Rule No.''')

        self.Spinbox1 = Spinbox(top, from_=1.0, to=256.0)
        self.Spinbox1.place(relx=0.26, rely=0.14, relheight=0.14, relwidth=0.14)
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(command=CA_support.changeRule)
        self.Spinbox1.configure(from_="1.0")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(textvariable=CA_support.tvRule)
        self.Spinbox1.configure(to="256.0")
        self.Spinbox1.configure(validate="all")
        self.Spinbox1.configure(width=48)
        self.Spinbox1.configure(validatecommand=CA_support.validateRule)
        

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active',"_ana2color")])
        self.TCheckbutton1 = ttk.Checkbutton(top)
        self.TCheckbutton1.place(relx=0.43, rely=0.14, relwidth=0.5
                , relheight=0.0, height=18)
        self.TCheckbutton1.configure(variable=CA_support.useRandomInitialConditions)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Random Initial Conditions''')

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.06, rely=0.64, height=25, width=83)
        self.TButton1.configure(command=CA_support.startCA)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Start''')

        self.TButton2 = ttk.Button(top)
        self.TButton2.place(relx=0.34, rely=0.64, height=25, width=83)
        self.TButton2.configure(command=CA_support.stopCA)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Stop''')

        self.TButton3 = ttk.Button(top)
        self.TButton3.place(relx=0.69, rely=0.64, height=25, width=83)
        self.TButton3.configure(command=CA_support.clearCA)
        self.TButton3.configure(takefocus="")
        self.TButton3.configure(text='''Clear''')

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.06, rely=0.36, height=16, width=42)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Speed''')

        self.Scale1 = Scale(top)
        self.Scale1.place(relx=0.24, rely=0.36, relwidth=0.68, relheight=0.0
                , height=21)
        self.Scale1.configure(activebackground="#d9d9d9")
        self.Scale1.configure(font="TkTextFont")
        self.Scale1.configure(length="228")
        self.Scale1.configure(orient="horizontal")
        self.Scale1.configure(showvalue="0")
        self.Scale1.configure(to="0")
        self.Scale1.configure(from_="100")
        self.Scale1.configure(troughcolor="#d9d9d9")
        self.Scale1.configure(variable=CA_support.speed)
        self.Scale1.configure(command=CA_support.changeSpeed)
        






if __name__ == '__main__':
    vp_start_gui()
    CA_support.stopCA()
    CA_support.clearCA()
    print "EXIT APP"



