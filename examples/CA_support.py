#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    May 06, 2017 06:09:04 PM


import sys
import time
import math
import threading
import numpy as np
import random
from random import randint

import scrollphathd


rule = 30
running = False
speed = 0

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global tvRule
    tvRule = StringVar()
    tvRule.set(rule)
    global useRandomInitialConditions
    useRandomInitialConditions = BooleanVar()
    global dvSpeed
    dvSpeed = DoubleVar()
    dvSpeed.set(speed)

def validateRule():
    global rule
    _rule = tvRule.get()
    if _rule:
        rule = int(_rule)
    return True
    
def changeRule():
    global rule
    rule = int(tvRule.get())

def changeSpeed(value):
    global speed
    speed = int(value)

def clearCA():
    scrollphathd.clear()
    scrollphathd.show()

def startCA():
    global th
    global running
    global rule
    if running:
        stopCA()
        time.sleep(0.5)
        clearCA()
        startCA()
    else:
        th = threading.Thread(target=initCA, args=(rule,))
        th.start()

def stopCA():
    global running
    running=False;
    print "STOPPING"


def initCA(_rule):  
    global matrix
    global running
    global row
    global rule
 
    matrix = np.zeros((7, 17), dtype=np.int)
    if useRandomInitialConditions.get():
        for x in range(0, 17):
            matrix[0,x] = random.randint(0, 1);
    else:
        matrix[0,8] = 1;

    row = 0
    scrollphathd.clear()
    scrollphathd.rotate(degrees=180)
    scrollphathd.set_brightness(0.1)
    rule = _rule
    print 'RULE', rule, str(bin(rule))[2:]

    running=True;

    while running:
        redraw()
        if row < 6:
            matrix[row+1] = evolve(matrix[row])
            row = row + 1
        else:
            matrix = np.roll(matrix, -1, axis=0)
            matrix[6] = evolve(matrix[5])

def redraw():
    global speed
    global running
    for y in range(0, 7):
        for x in range(0, 17):
            brightness = matrix[y,x]
            scrollphathd.pixel(x, y, brightness)
    scrollphathd.show()
    ##  might want to slow it down a bit ;)
    if running:
        time.sleep(0.01 * speed)

def evolve(row):
    out = np.zeros((17), dtype=np.int)
    for x in range(0, 17):
        ##  get the sum [Y] over the range x-1 to x+1
        ##  bit shift 1bit Y places to the left
        ##  bitise AND with the rule
        ##  so, read the three cells at x-1, x and x+1 (with wrapping)
        a = row[x-1] if x > 0 else row[16]
        b = row[x]
        c = row[x+1] if x < 16 else row[0]
        o = 1 << ((a << 2) + (b << 1) + c)
        out[x] = 1 if o&rule else 0
    return out



def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import CA
    CA.vp_start_gui()

